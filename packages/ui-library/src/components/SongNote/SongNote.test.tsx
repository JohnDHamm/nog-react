import React from 'react';
import SongNote, { SongNoteProps } from './SongNote';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { subTestIdInit } from 'function-library';

describe('SongNote', () => {
  const testid = 'SongNote';
  const subTestid = subTestIdInit(testid);

  const baseProps: SongNoteProps = {
    type: 'note',
    length: 'whole',
  };

  it('should render a whole note with given type and length', () => {
    render(<SongNote {...baseProps} />);
    expect(screen.getByTestId(subTestid('whole-note'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('OpenNoteBody'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a half note with given type and length', () => {
    render(<SongNote {...baseProps} length="half" />);
    expect(screen.getByTestId(subTestid('half-note'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('OpenNoteBody'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a quarter note with given type and length', () => {
    render(<SongNote {...baseProps} length="quarter" />);
    expect(screen.getByTestId(subTestid('quarter-note'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render an eighth note with given type and length', () => {
    render(<SongNote {...baseProps} length="eighth" />);
    expect(screen.getByTestId(subTestid('eighth-note'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('EighthFlag'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a sixteenth note with given type and length', () => {
    render(<SongNote {...baseProps} length="sixteenth" />);
    expect(screen.getByTestId(subTestid('sixteenth-note'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SixteenthFlag'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a dotted note with given type and length', () => {
    render(<SongNote {...baseProps} length="sixteenth-dotted" />);
    expect(
      screen.getByTestId(subTestid('sixteenth-dotted-note'))
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SixteenthFlag'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('DottedNote'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a ledger line below note with given type and length', () => {
    render(
      <SongNote {...baseProps} length="sixteenth-dotted" ledgerLine="below" />
    );
    expect(
      screen.getByTestId(subTestid('sixteenth-dotted-note-belowLedgerLine'))
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SixteenthFlag'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('DottedNote'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.getByTestId(subTestid('LedgerLineBelow'))
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a ledger line through note with given type and length', () => {
    render(
      <SongNote {...baseProps} length="sixteenth-dotted" ledgerLine="through" />
    );
    expect(
      screen.getByTestId(subTestid('sixteenth-dotted-note-throughLedgerLine'))
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SixteenthFlag'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('DottedNote'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.getByTestId(subTestid('LedgerLineThrough'))
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a ledger line above note with given type and length', () => {
    render(
      <SongNote {...baseProps} length="sixteenth-dotted" ledgerLine="above" />
    );
    expect(
      screen.getByTestId(subTestid('sixteenth-dotted-note-aboveLedgerLine'))
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('ClosedNoteBody'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('Tail'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SixteenthFlag'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('DottedNote'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.getByTestId(subTestid('LedgerLineAbove'))
    ).toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a whole rest with given type and length', () => {
    render(<SongNote {...baseProps} type="rest" />);
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('WholeRest'))).toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a half rest with given type and length', () => {
    render(<SongNote {...baseProps} type="rest" length="half" />);
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('HalfRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a quarter rest with given type and length', () => {
    render(<SongNote {...baseProps} type="rest" length="quarter" />);
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('QuarterRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render an eighth rest with given type and length', () => {
    render(<SongNote {...baseProps} type="rest" length="eighth" />);
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('EighthRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a sixteenth rest with given type and length', () => {
    render(<SongNote {...baseProps} type="rest" length="sixteenth" />);
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SixteenthRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a dotted rest with given type and length', () => {
    render(<SongNote {...baseProps} type="rest" length="half-dotted" />);
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('HalfRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('DottedRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should not render a ledger line or note key with a rest type', () => {
    render(
      <SongNote
        {...baseProps}
        type="rest"
        length="half"
        ledgerLine="above"
        noteKey="flat"
      />
    );
    expect(
      screen.queryByTestId(subTestid('OpenNoteBody'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('HalfRest'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should accept an optional "color" prop', () => {
    render(<SongNote {...baseProps} color="#bada55" />);
    expect(screen.getByTestId(subTestid('whole-note'))).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('OpenNoteBody'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a flat key signature when specified', () => {
    render(<SongNote {...baseProps} noteKey="flat" />);
    expect(
      screen.getByTestId(subTestid('whole-note-flat'))
    ).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('OpenNoteBody'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('FlatKey'))).toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });

  it('should render a sharp key signature when specified', () => {
    render(<SongNote {...baseProps} noteKey="sharp" />);
    expect(
      screen.getByTestId(subTestid('whole-note-sharp'))
    ).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('OpenNoteBody'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('SharpKey'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('NaturalKey'))
    ).not.toBeInTheDocument();
  });
  it('should render a natural key signature when specified', () => {
    render(<SongNote {...baseProps} noteKey="natural" />);
    expect(
      screen.getByTestId(subTestid('whole-note-natural'))
    ).toBeInTheDocument();
    expect(screen.getByTestId(subTestid('OpenNoteBody'))).toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('ClosedNoteBody'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('Tail'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthFlag'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedNote'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('WholeRest'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('HalfRest'))).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('QuarterRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('EighthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('SixteenthRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('DottedRest'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineBelow'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineThrough'))
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(subTestid('LedgerLineAbove'))
    ).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('FlatKey'))).not.toBeInTheDocument();
    expect(screen.queryByTestId(subTestid('SharpKey'))).not.toBeInTheDocument();
    expect(screen.getByTestId(subTestid('NaturalKey'))).toBeInTheDocument();
  });
});
